name: Delete ECR Repository

on:
  workflow_dispatch:
    inputs:
      NAMESPACE:
          required: true
          type: string

jobs:
  build:
    runs-on:  ubuntu-latest
    steps:
      - name: match user with devops user
        run: |
          echo "is_devops_member=false" >> $GITHUB_OUTPUT
          user=${GITHUB_ACTOR}
          if [ $user == 'shubhankitbansal' ] || [ $user == 'tarun-asthana' ] || [ $user == 'rewatiraman1' ]
          then
            echo $user true
            echo "is_devops_member=true" >> $GITHUB_OUTPUT
          else
            echo $user false
          fi
        id: get_devops_member
      - name: test
        run: |
          echo a steps.get_devops_member.outputs.is_devops_member == 'true'
          echo b steps.get_devops_member.outputs.is_devops_member == 'false'
          echo c ${{ steps.get_devops_member.outputs.is_devops_member == 'true' }}
          echo d ${{ steps.get_devops_member.outputs.is_devops_member == 'false' }}
          echo c ${{ steps.get_devops_member.outputs.is_devops_member }} == 'true'
          echo d ${{ steps.get_devops_member.outputs.is_devops_member }} == 'false'
          echo dsfd ${{ !${{ steps.get_devops_member.outputs.is_devops_member }} }}
      - name: check permission to actors
        if: ${{ steps.get_devops_member.outputs.is_devops_member }}
        run: |
          CURRENT_USER=${GITHUB_ACTOR}
          EXTENDED_DEVOPS_ACTORS=${{ vars.EXTENDED_DEVOPS_ACTORS }}
          IFS=',' read -ra extended_devops_actors <<< "$EXTENDED_DEVOPS_ACTORS"
          IS_AUTHORISED=false
          for ACTOR in "${extended_devops_actors[@]}"
          do
            if [ $CURRENT_USER == $ACTOR ]
            then
              IS_AUTHORISED=true
            fi
          done
          if [ $IS_AUTHORISED == false ]
          then
            echo "Not Authorised"
            exit 1
          else
            echo "Authorised"
          fi
      - name: check permission for namespaces
        if: true
        run: |
          CURRENT_USER=${GITHUB_ACTOR}
          USER_HAS_ACCESS=$(echo '${{ vars.NAMESPACE_ACCESS_LIST }}' | jq '.shubhankitbansal | any(. == "${{ inputs.NAMESPACE }}" )')
          echo hasAccess $USER_HAS_ACCESS
          if [ $USER_HAS_ACCESS == false ]
          then
            echo "Not Authorised"
            exit 1
          else
            echo "Authorised"
          fi
      - name: list_of_repository
        if: false
        run: |
          repositories=($(aws ecr describe-repositories --query 'repositories[]' | jq 'map(select(.repositoryName | startswith("${{ inputs.NAMESPACE }}/"))) | map(.repositoryName)' | jq -r '.[]'))
          for repository in $repositories
          do
            aws ecr delete-repository --repository-name $repository --force
          done
