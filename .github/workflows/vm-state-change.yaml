name: VM State Change

on:
  workflow_dispatch:
    inputs:
      STATE:
        required: true
        type: choice
        options:
          - NONE
          - START
          - STOP
          - RESTART
      user_email_address:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: |
          curl 'https://utilapi.geeksforgeeks.org/api/geo/usergeodetails/' \
            -H 'authority: utilapi.geeksforgeeks.org' \
            -H 'accept: */*' \
            -H 'accept-language: en-GB,en;q=0.8' \
            -H 'origin: https://www.geeksforgeeks.org' \
            -H 'referer: https://www.geeksforgeeks.org/' \
            -H 'sec-ch-ua: "Not/A)Brand";v="99", "Brave";v="115", "Chromium";v="115"' \
            -H 'sec-ch-ua-mobile: ?0' \
            -H 'sec-ch-ua-platform: "macOS"' \
            -H 'sec-fetch-dest: empty' \
            -H 'sec-fetch-mode: cors' \
            -H 'sec-fetch-site: same-site' \
            -H 'sec-gpc: 1' \
            -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36' \
            --compressed

          echo $ACD
          echo $s{{ env.ACD }}
        env:
          ACD: 'dsd'
      - name: env print
        run: |
          EMAILS=${{ vars.EMAIL }}
          IFS=',' read -ra emails <<< "$EMAILS"
          exists=false
          for email in "${emails[@]}"; do
            if [ ${{ inputs.user_email_address }} == $email ]
            then
              exists=true
            fi
          done
          if [ $exists == false ]
          then
            echo "Email not exist"
            exit 1
          else
            echo "Email Exist"
          fi
      - name: login to ACR
        id: process_json
        run: |
          # Your JSON data
          EMAIL_ADDRESS=$(jq -r '.inputs.user_email_address' $GITHUB_EVENT_PATH)
          echo ::add-mask::$EMAIL_ADDRESS
          echo "::add-mask::${{ inputs.user_email_address }}"
          echo "${{ inputs.user_email_address }}"
          echo "$EMAIL_ADDRESS"
          json_data='{"name": "zs-oyo-temp-vm","privateIp": "10.73.100.4","resourceGroup": "Oyo-migration-RG"}'

          name=$(echo "$json_data" | jq -r '.name')
          privateIp=$(echo "$json_data" | jq -r '.privateIp')
          resourceGroup=$(echo "$json_data" | jq -r '.resourceGroup')
          
          echo "NAME=$name" >> $GITHUB_OUTPUT
          echo "PRIVATE_IP=$privateIp" >> $GITHUB_OUTPUT
          echo "RESOURCE_GROUP=$resourceGroup" >> $GITHUB_OUTPUT


      - run: |
          echo "$EMAIL_ADDRESS"
          echo "Name: ${{ steps.process_json.outputs.NAME }}"
          echo "Private IP: ${{ steps.process_json.outputs.PRIVATE_IP }}"
          echo "Resource Group: ${{ steps.process_json.outputs.RESOURCE_GROUP }}"





     
